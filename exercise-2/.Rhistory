demo()
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- Sys.Date()
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
summer_break <- as.Date('June 08, 2017',format='%B %d, %Y')
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- today - summer_break
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
summer_break <- as.Date('June 08, 2018',format='%B %d, %Y')
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- today - summer_break
days_to_break
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
days_to_break
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 18
# Create a variable `my_name` that is equal to your first name
my_name <- "Joseph"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 24 * 60
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 365 * 24
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
paste("Hello, my name is", name, ", and I'm", age, "years old.")
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is ", "Hey, I'm ", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(x) {
x * 2
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(x) {
x^3
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Star Wars", "Captain America 2", "Hunt for the Wilderpeople", "Grave of the Fireflies", "Tron Legacy", "Lord of The Rings")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, " is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- movies[c(1:3, 5)]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- Sys.Date()
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
summer_break <- as.Date('June 08, 2018',format='%B %d, %Y')
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, char) {
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string) {
digits <- c(0:9)
gsub(digits[0:9], "", string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits("INFO 201")
test
make_birthday_intro <- function(name, age, char) {
N <- char - today
paste(make_introduction(name, age), "in", N )
}
make_birthday_intro("joseph", 18, "April 10, 2018")
make_birthday_intro <- function(name, age, char) {
N <- as.Date(char ,format='%B %d, %Y') - today
paste(make_introduction(name, age), "in", N )
}
make_birthday_intro("joseph", 18, "April 10, 2018")
make_birthday_intro <- function(name, age, char) {
N <- as.Date(char ,format='%B %d, %Y') - today
paste(make_introduction(name, age), "in", N , "days I'll be", age + 1)
}
make_birthday_intro("joseph", 18, "April 10, 2018")
make_birthday_intro <- function(name, age, char) {
N <- as.Date(char ,format='%B %d, %Y') - today
paste(make_introduction(name, age), "in", N , "days I'll be", age + 1, "years old.")
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro("Joseph", 18, "November 11, 2018")
my_bday_intro
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string) {
digits <- c(0:9)
gsub(digits[0:9], "", string)
}
test
digits <- c(0:9)
gsub(digits[0:9], "", string)
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string) {
digits <- c(0:9)
gsub(digits[0:9], "", string)
}
test
?gsub
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string) {
digits <- c(0:9)
gsub(digits, "", string)
}
test
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string) {
digits <- c(0:9)
str_extract_all(string, digits)
}
test
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string) {
digits <- c(0,2,9)
str_extract_all(string, digits)
}
test
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits("INFO 200")
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string) {
digits <- c(0,2,9)
str_extract_all(string, digits, "")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits("INFO 200")
digits <- c(0:9)
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string) {
digits <- c(0:9)
str_extract_all(string, digits, "")
}
test
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits("INFO 200")
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string) {
digits <- c("0", )
str_extract_all(string, [0123456789], "")
}
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string) {
digits <- c("0", )
str_extract_all(string, "[0123456789]", "")
}
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string) {
str_extract_all(string, "[0123456789]", "")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits("INFO 200")
test
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string) {
str_replace_all(string, "[0123456789]", "")
}
test
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits("INFO 200")
test
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO 200", "CSE142"))
test
install.packages("devtools")
devtools::install_github("jimhester/lintr")
styler:::style_active_file()
lintr:::addin_lint()
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
library("stringr")
lintr:::addin_lint()
lintr:::addin_lint()
# load relevant libraries
library(httr)
library(jsonlite)
# load relevant libraries
library(httr)
library(jsonlite)
setwd("C:/Users/josep/Desktop/INFO201/ch11-apis/exercise-2")
nty_apikey <- "ebd9b41452174b1da3c56239b79b3d04"
nty_apikey <- "ebd9b41452174b1da3c56239b79b3d04"
source('C:/Users/josep/Desktop/INFO201/ch11-apis/exercise-2/apikey.R')
nty_apikey <- "ebd9b41452174b1da3c56239b79b3d04"
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.r")
# Create a variable `movie.name` that is the name of a movie of your choice.
movie.name <- "Finding Dory"
?GET
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie.name` variable as the search query!
response <- GET(paste0("https://api.nytimes.com/svc/movies/v2/", "reviews/search.json"))
response
byt
nty_apikey
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie.name` variable as the search query!
response <- GET(paste0("https://api.nytimes.com/svc/movies/v2/", "reviews/search.json", "?api-key=", nty_apikey))
response
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie.name` variable as the search query!
response <- GET(paste0("https://api.nytimes.com/svc/movies/v2/", "reviews/search.json", "?api-key=", nty_apikey, "&query=", movie_name))
# Create a variable `movie.name` that is the name of a movie of your choice.
movie_name <- "Finding Dory"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie.name` variable as the search query!
response <- GET(paste0("https://api.nytimes.com/svc/movies/v2/", "reviews/search.json", "?api-key=", nty_apikey, "&query=", movie_name))
response
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response_content <- content(response, "text")
response_content
source('C:/Users/josep/Desktop/INFO201/ch11-apis/exercise-1/exercise.R')
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resource <- "/orgs/info201/repos"
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
response <- GET(paste0(base_uri, resource))
# Extract the "text" of the response usin the `content` function
response_content <- content(response, "text")
# Convert the body from JSON into a data frame
body_data <- fromJSON(response_content)
# load relevant libraries
library(httr)
library(jsonlite)
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.r")
# Create a variable `movie.name` that is the name of a movie of your choice.
movie_name <- "Finding Dory"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie.name` variable as the search query!
response <- GET(paste0("https://api.nytimes.com/svc/movies/v2/", "reviews/search.json", "?api-key=", nty_apikey, "&query=", movie_name))
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response_content <- content(response, "text")
# What kind of data structure did this produce? A data frame? A list?
body_data <- fromJSON(response_content)
body_data
source('C:/Users/josep/Desktop/INFO201/ch11-apis/exercise-2/exercise.R')
# What kind of data structure did this produce? A data frame? A list?
body_data <- fromJSON(response_content)
response
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie.name` variable as the search query!
query_params <- list(api-key = nty_apikey, q = movie_name)
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie.name` variable as the search query!
query_params <- list(api-key = nty_apikey, q = movie_name)
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie.name` variable as the search query!
query_params <- list(api-key == nty_apikey, q == movie_name)
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie.name` variable as the search query!
query_params <- list("api-key" == nty_apikey, "q" == movie_name)
response <- GET(paste0("https://api.nytimes.com/svc/movies/v2/", "reviews/search.json", "?api-key="), query = query_params)
response
response <- GET(paste0("https://api.nytimes.com/svc/movies/v2/", "reviews/search.json"), query = query_params)
View(query_params)
query_params
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie.name` variable as the search query!
query_params <- list("api-key" = nty_apikey, "q" = movie_name)
response <- GET("https://api.nytimes.com/svc/movies/v2/reviews/search.json", query = query_params)
response
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response_content <- content(response, "text")
response_content
# What kind of data structure did this produce? A data frame? A list?
body_data <- fromJSON(response_content)
body_data
# Create a variable `movie.name` that is the name of a movie of your choice.
movie_name <- "Hunt for the Wilderpeople"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie.name` variable as the search query!
query_params <- list("api-key" = nty_apikey, "q" = movie_name)
response <- GET("https://api.nytimes.com/svc/movies/v2/reviews/search.json", query = query_params)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response_content <- content(response, "text")
# What kind of data structure did this produce? A data frame? A list?
body_data <- fromJSON(response_content)
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie.name` variable as the search query!
query_params <- list("api-key" = nty_apikey, "query" = movie_name)
response <- GET("https://api.nytimes.com/svc/movies/v2/reviews/search.json", query = query_params)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response_content <- content(response, "text")
# What kind of data structure did this produce? A data frame? A list?
body_data <- fromJSON(response_content)
body_data
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
names(body_data)
str(body_data)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(body_data)
is.data.frame(body_data)
View(body_data)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(body_data$results)
reviews
View(reviews)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
headline <- reviews$headline
short_summary <- reviews$summary_short
link_to_article <- reviews$link.url
# Create a list of the three pieces of information from above.
# Print out the list.
review_list <- list(c(headline, short_summary, link_to_article))
review_list
